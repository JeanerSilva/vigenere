package main

import (
	"fmt"
)

func main() {

	original := "Quem se interessa por aprender a falar Português já pode contar com um ensino eficiente. Com os nossos métodos conseguimos ensinar, sobretudo alunos iniciantes, por meio de textos práticos, que favorecem a boa leitura e consequente compreensão do que é ensinado."
	//original := "Qual é a velocidade dos seus downloads? Em poucos segundos, o teste do FAST.com faz uma estimativa da velocidade do seu provedor."

	fmt.Printf("Original: %s\n\n", original)

	key := "Teste"

	textoCifrado, err := cipher2(original, key)

	if err == nil {
		fmt.Println(textoCifrado)
	} else {
		fmt.Println(err)
	}
}

func lower(idx byte) bool {
	return idx >= 'a' && idx <= 'z'
}

func upper(idx byte) bool {
	return idx >= 'a' && idx <= 'z'
}


func cipher2(plainTextString string, key string) (string, error) {
	plainText := []byte(plainTextString)
	cipherText := make([]byte, len(plainText))
	keyAlpha := make([]byte, len(key))

	idxKey := 0
	for idx := range plainText {
		if lower(plainText[idx]) {
			cipherText[idx] = ((plainText[idx]-'a')+keyAlpha[idxKey])%26 + 'a'
			idxKey = (idxKey + 1) % len(keyAlpha)
		} else if upper(plainText[idx])  {
			cipherText[idx] = ((plainText[idx]-'A')+keyAlpha[idxKey])%26 + 'A'
			idxKey = (idxKey + 1) % len(keyAlpha)
		} else {
			cipherText[idx] = plainText[idx]
		}
	}

	return string(cipherText), nil
}

func cipher(plainTextString string, key string) (string, error) {
	plainText := []byte(plainTextString)
	cipherText := make([]byte, len(plainText))
	keyAlpha := make([]byte, len(key))

	for i := range key {
		if (key[i] >= 'a') && (key[i]) <= 'z' {
			keyAlpha[i] = key[i] - 'a'
		} else if (key[i] >= 'A') && (key[i] <= 'Z') {
			keyAlpha[i] = key[i] - 'A'
		} else {
			return "", fmt.Errorf("Key '%s' is not valid. Use [a-z] or [A-Z]", key)
		}
	}

	fmt.Println("keyalfa", keyAlpha)

	idxKey := 0
	for idx := range plainText {
		if plainText[idx] >= 'a' && plainText[idx] <= 'z' {
			cipherText[idx] = ((plainText[idx]-'a')+keyAlpha[idxKey])%26 + 'a'
			idxKey = (idxKey + 1) % len(keyAlpha)
		} else if plainText[idx] >= 'A' && plainText[idx] <= 'Z' {
			cipherText[idx] = ((plainText[idx]-'A')+keyAlpha[idxKey])%26 + 'A'
			idxKey = (idxKey + 1) % len(keyAlpha)
		} else {
			cipherText[idx] = plainText[idx]
		}
	}

	return string(cipherText), nil
}

func decipher(cipherTextString string, key string) (string, error) {
	cipherText := []byte(cipherTextString)
	decipherText := make([]byte, len(cipherText))
	keyAlpha := make([]byte, len(key))

	for i := range key {
		if (key[i] >= 'a') && (key[i]) <= 'z' {
			keyAlpha[i] = key[i] - 'a'
		} else if (key[i] >= 'A') && (key[i] <= 'Z') {
			keyAlpha[i] = key[i] - 'A'
		} else {
			return "", fmt.Errorf("Key '%s' is not valid. Use [a-z] or [A-Z]", key)
		}
	}

	idxKey := 0
	for idx := range cipherText {
		if cipherText[idx] >= 'a' && cipherText[idx] <= 'z' {
			decipherText[idx] = ((cipherText[idx]-'a')+26-keyAlpha[idxKey])%26 + 'a'
			idxKey = (idxKey + 1) % len(keyAlpha)
		} else if cipherText[idx] >= 'A' && cipherText[idx] <= 'Z' {
			decipherText[idx] = ((cipherText[idx]-'A')+26-keyAlpha[idxKey])%26 + 'A'
			idxKey = (idxKey + 1) % len(keyAlpha)
		} else {
			decipherText[idx] = cipherText[idx]
		}
	}

	return string(decipherText), nil
}
